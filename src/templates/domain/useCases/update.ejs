const merge = require('deepmerge')
const { usecase, step, Ok, Err } = require('@herbsjs/herbs')
const { <%= props.name.pascalCase %> } = require('../../entities')

const useCase = ({ <%= props.name.camelCase %>Repository }) => () =>
  usecase('Update <%= props.name.pascalCase %>', {
    // Input/Request metadata and validation 
    request: {
        id: Number,
        <%= props.request %>
    },

    // Output/Response metadata
    response: <%= props.name.pascalCase %>,

    //Authorization with Audit
    // authorize: user => (user.canUpdate<%= props.name.pascalCase %> ? Ok() : Err()),
    authorize: user => Ok(user),

    //Step description and function
    'Check if the <%= props.name.pascalCase %> is valid': step(async ctx => {
      const <%= props.name.camelCase %> = await <%= props.name.camelCase %>Repository.findByID(parseInt(ctx.req.id))
      const new<%= props.name.pascalCase %> = merge.all([ <%= props.name.camelCase %>, ctx.req ])
      ctx.<%= props.name.camelCase %> = <%= props.name.pascalCase %>.fromJSON(new<%= props.name.pascalCase %>)

      if (!ctx.<%= props.name.camelCase %>.isValid()) return Err.invalidEntity({
        message: 'The <%= props.name.pascalCase %> entity is invalid', 
        payload: { entity: '<%= props.name.pascalCase %>' },  
        cause: ctx.<%= props.name.camelCase %>.errors
      })
      // returning Ok continues to the next step. Err stops the use case execution.
      return Ok() 
    }),

    'Update the <%= props.name.pascalCase %>': step(async ctx => {
      // ctx.ret is the Use Case return
      return (ctx.ret = await <%= props.name.camelCase %>Repository.update(ctx.<%= props.name.camelCase %>)) 
    })
  })

module.exports = useCase